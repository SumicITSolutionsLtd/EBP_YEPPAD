package com.youthconnect.edge_functions.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.youthconnect.edge_functions.dto.ChatRequest;
import com.youthconnect.edge_functions.dto.response.ChatResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.env.Environment;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.*;

/**
 * OpenAI Service - Production-Ready Implementation
 *
 * Handles all interactions with OpenAI APIs:
 * - Chat completions (GPT-4/GPT-3.5)
 * - Text-to-Speech (TTS)
 * - Speech-to-Text (Whisper)
 *
 * @author Douglas Kings Kato
 * @version 2.0
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class OpenAIService {

    private final Environment environment;
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    // ============================================
    // CONFIGURATION GETTERS
    // ============================================

    private String getOpenAIApiKey() {
        String apiKey = environment.getProperty("OPENAI_API_KEY");
        if (apiKey == null || apiKey.isEmpty()) {
            apiKey = environment.getProperty("openai.api.key");
        }
        if (apiKey == null || apiKey.isEmpty() || apiKey.equals("your-openai-key-here")) {
            log.warn("‚ö†Ô∏è OpenAI API key not configured");
            apiKey = "your-openai-key-here";
        }
        return apiKey;
    }

    private String getOpenAIBaseUrl() {
        return environment.getProperty("openai.api.base-url", "https://api.openai.com/v1");
    }

    // ============================================
    // CHAT COMPLETION (GPT)
    // ============================================

    /**
     * Sends a message to OpenAI Chat API
     *
     * @param chatRequest Contains message, system prompt, and conversation history
     * @return ChatResponse with AI response and usage data
     */
    public ChatResponse chatWithAI(ChatRequest chatRequest) {
        try {
            String apiKey = getOpenAIApiKey();
            String baseUrl = getOpenAIBaseUrl();

            if (apiKey.equals("your-openai-key-here")) {
                throw new RuntimeException("OpenAI API key not configured");
            }

            log.debug("ü§ñ Sending chat request to OpenAI");

            // Build conversation messages
            List<Map<String, String>> messages = new ArrayList<>();

            // Add system prompt
            String systemPrompt = chatRequest.getSystemPrompt() != null
                    ? chatRequest.getSystemPrompt()
                    : "You are a helpful assistant for the Entrepreneurship Booster Platform";

            messages.add(Map.of("role", "system", "content", systemPrompt));

            // Add conversation history
            if (chatRequest.getConversationHistory() != null) {
                messages.addAll(chatRequest.getConversationHistory());
            }

            // Add current user message
            messages.add(Map.of("role", "user", "content", chatRequest.getMessage()));

            // Prepare request payload
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model", "gpt-4o-mini");
            requestBody.put("messages", messages);
            requestBody.put("max_tokens", 200);
            requestBody.put("temperature", 0.7);

            // Prepare HTTP headers
            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", "Bearer " + apiKey);
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

            // Make API call
            ResponseEntity<Map> response = restTemplate.exchange(
                    baseUrl + "/chat/completions",
                    HttpMethod.POST,
                    entity,
                    Map.class
            );

            // Process response
            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                Map<String, Object> responseBody = response.getBody();
                List<Map<String, Object>> choices = (List<Map<String, Object>>) responseBody.get("choices");

                if (choices != null && !choices.isEmpty()) {
                    Map<String, Object> message = (Map<String, Object>) choices.get(0).get("message");
                    String aiResponse = (String) message.get("content");

                    log.debug("‚úÖ Successfully received AI response");

                    return ChatResponse.builder()
                            .response(aiResponse)
                            .usage((Map<String, Object>) responseBody.get("usage"))
                            .build();
                }
            }

            throw new RuntimeException("Failed to get valid response from OpenAI");

        } catch (HttpClientErrorException e) {
            log.error("‚ùå OpenAI API client error: {}", e.getStatusCode());
            throw new RuntimeException("AI service error: " + e.getStatusCode());
        } catch (HttpServerErrorException e) {
            log.error("‚ùå OpenAI API server error: {}", e.getStatusCode());
            throw new RuntimeException("AI service temporarily unavailable");
        } catch (Exception e) {
            log.error("‚ùå OpenAI API error: {}", e.getMessage(), e);
            throw new RuntimeException("AI service temporarily unavailable");
        }
    }

    // ============================================
    // TEXT-TO-SPEECH (TTS)
    // ============================================

    /**
     * Converts text to speech using OpenAI TTS API
     *
     * @param text Text to convert (max 4096 characters)
     * @param voice Voice type (alloy, echo, fable, onyx, nova, shimmer)
     * @return Base64 encoded MP3 audio
     */
    public String textToSpeech(String text, String voice) {
        try {
            String apiKey = getOpenAIApiKey();
            String baseUrl = getOpenAIBaseUrl();

            if (apiKey.equals("your-openai-key-here")) {
                throw new RuntimeException("OpenAI API key not configured");
            }

            log.debug("üîä Converting text to speech");

            if (text.length() > 4096) {
                throw new IllegalArgumentException("Text too long (max 4096 characters)");
            }

            // Prepare TTS request payload
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model", "tts-1");
            requestBody.put("input", text);
            requestBody.put("voice", voice != null ? voice : "alloy");
            requestBody.put("response_format", "mp3");
            requestBody.put("speed", 0.9);

            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", "Bearer " + apiKey);
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

            ResponseEntity<byte[]> response = restTemplate.exchange(
                    baseUrl + "/audio/speech",
                    HttpMethod.POST,
                    entity,
                    byte[].class
            );

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                String base64Audio = Base64.getEncoder().encodeToString(response.getBody());
                log.debug("‚úÖ Successfully generated speech audio");
                return base64Audio;
            }

            throw new RuntimeException("Failed to generate speech");

        } catch (Exception e) {
            log.error("‚ùå OpenAI TTS error: {}", e.getMessage(), e);
            throw new RuntimeException("Text-to-speech service unavailable");
        }
    }

    // ============================================
    // SPEECH-TO-TEXT (Whisper) - FIXED
    // ============================================

    /**
     * Converts speech audio to text using OpenAI Whisper API
     *
     * ‚úÖ FIXED: Now accepts byte[] instead of String
     *
     * @param audioData Audio file as byte array
     * @return Transcribed text
     */
    public String speechToText(byte[] audioData) {  // ‚úÖ FIXED PARAMETER TYPE
        try {
            String apiKey = getOpenAIApiKey();
            String baseUrl = getOpenAIBaseUrl();

            if (apiKey.equals("your-openai-key-here")) {
                throw new RuntimeException("OpenAI API key not configured");
            }

            log.debug("üé§ Converting speech to text ({} bytes audio)", audioData.length);

            if (audioData.length > 25 * 1024 * 1024) {
                throw new IllegalArgumentException("Audio file too large (max 25 MB)");
            }

            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", "Bearer " + apiKey);
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);

            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();

            org.springframework.core.io.ByteArrayResource audioResource =
                    new org.springframework.core.io.ByteArrayResource(audioData) {
                        @Override
                        public String getFilename() {
                            return "audio.webm";
                        }
                    };

            body.add("file", audioResource);
            body.add("model", "whisper-1");
            body.add("language", "en");

            HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(body, headers);

            ResponseEntity<Map> response = restTemplate.exchange(
                    baseUrl + "/audio/transcriptions",
                    HttpMethod.POST,
                    entity,
                    Map.class
            );

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                String transcribedText = (String) response.getBody().get("text");
                log.debug("‚úÖ Successfully transcribed audio");
                return transcribedText;
            }

            throw new RuntimeException("Failed to transcribe audio");

        } catch (Exception e) {
            log.error("‚ùå OpenAI Whisper error: {}", e.getMessage(), e);
            throw new RuntimeException("Speech-to-text service unavailable");
        }
    }

    public boolean isConfigured() {
        String apiKey = getOpenAIApiKey();
        return apiKey != null && !apiKey.isEmpty() && !apiKey.equals("your-openai-key-here");
    }

    public String getStatus() {
        return isConfigured() ? "OpenAI API configured" : "OpenAI API not configured";
    }
}