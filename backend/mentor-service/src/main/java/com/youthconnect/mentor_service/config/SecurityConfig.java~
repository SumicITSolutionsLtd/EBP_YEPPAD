package com.youthconnect.mentor_service.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;

/**
 * ============================================================================
 * SECURITY CONFIGURATION
 * ============================================================================
 *
 * Configures Spring Security for the mentor service.
 * Implements stateless JWT-based authentication with role-based access control.
 *
 * SECURITY FEATURES:
 * - Stateless session management (no server-side sessions)
 * - JWT token validation
 * - Role-based access control (RBAC)
 * - Method-level security with @PreAuthorize
 * - CSRF disabled (stateless API)
 * - CORS handled by API Gateway
 *
 * AUTHENTICATION FLOW:
 * 1. Client obtains JWT from auth-service
 * 2. Client includes JWT in Authorization header
 * 3. API Gateway validates JWT
 * 4. Gateway adds X-User-Id header with validated user ID
 * 5. Mentor service trusts X-User-Id header (internal network)
 *
 * AUTHORIZATION:
 * - Endpoint-level: Configured in SecurityFilterChain
 * - Method-level: @PreAuthorize annotations
 * - Role hierarchy: ADMIN > NGO > MENTOR > YOUTH
 *
 * PUBLIC ENDPOINTS:
 * - /actuator/health - Health check
 * - /actuator/info - Application info
 * - /actuator/prometheus - Metrics (restrict in production)
 * - /swagger-ui/** - API documentation
 * - /api-docs/** - OpenAPI specification
 *
 * PROTECTED ENDPOINTS:
 * - /api/mentorship/** - Requires authentication
 * - Role-specific access enforced per endpoint
 *
 * @author Douglas Kings Kato
 * @version 1.0.0
 * @since 2025-01-21
 * ============================================================================
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
@Slf4j
public class SecurityConfig {

    /**
     * Security Filter Chain
     * Configures HTTP security rules
     *
     * SECURITY CHAIN:
     * 1. Disable CSRF (stateless API)
     * 2. Configure authorization rules
     * 3. Set stateless session management
     * 4. Add custom security headers
     *
     * @param http HttpSecurity builder
     * @return Configured SecurityFilterChain
     * @throws Exception if configuration fails
     */
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        log.info("Configuring security filter chain");

        http
                // Disable CSRF (not needed for stateless API)
                .csrf(AbstractHttpConfigurer::disable)

                // Configure authorization rules
                .authorizeHttpRequests(auth -> auth
                        // Public actuator endpoints
                        .requestMatchers("/actuator/health").permitAll()
                        .requestMatchers("/actuator/info").permitAll()

                        // Prometheus metrics (restrict in production)
                        .requestMatchers("/actuator/prometheus").permitAll()

                        // Swagger UI and API docs
                        .requestMatchers("/swagger-ui/**").permitAll()
                        .requestMatchers("/v3/api-docs/**").permitAll()
                        .requestMatchers("/swagger-resources/**").permitAll()

                        // All API endpoints require authentication
                        .requestMatchers("/api/**").authenticated()

                        //// All other requests require authentication
                        .anyRequest().authenticated()
                )

                // Stateless session management (no server-side sessions)
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                )

                // Add security headers
                .headers(headers -> headers
                        .frameOptions(frame -> frame.deny())
                        .xssProtection(xss -> xss.disable())
                        .contentSecurityPolicy(csp -> csp
                                .policyDirectives("default-src 'self'")
                        )
                );

        log.info("Security filter chain configured successfully");
        return http.build();
    }
}