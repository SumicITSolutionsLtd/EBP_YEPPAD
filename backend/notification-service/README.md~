# 📱 Notification Service - Kwetu-Hub Platform

Multi-channel notification delivery service supporting SMS, Email, and Push notifications for the Youth Connect Uganda platform.

![Build Status](https://img.shields.io/badge/build-passing-brightgreen)
![Coverage](https://img.shields.io/badge/coverage-85%25-green)
![Spring Boot](https://img.shields.io/badge/Spring%20Boot-3.1.5-brightgreen)
![Java](https://img.shields.io/badge/Java-17-orange)
![License](https://img.shields.io/badge/license-Proprietary-red)

---

## 📋 Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Architecture](#architecture)
- [Technology Stack](#technology-stack)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Configuration](#configuration)
- [Running the Service](#running-the-service)
- [API Documentation](#api-documentation)
- [Testing](#testing)
- [Deployment](#deployment)
- [Monitoring](#monitoring)
- [Troubleshooting](#troubleshooting)
- [Contributing](#contributing)
- [License](#license)

---

## 🎯 Overview

The Notification Service is a critical component of the Kwetu-Hub Platform, responsible for delivering multi-channel notifications to 10,000+ users across Uganda. It ensures that youth beneficiaries receive timely updates about opportunities, applications, mentorship sessions, and learning progress.

### Key Capabilities

- **SMS Delivery**: Via Africa's Talking API (coverage: 100% of Ugandan mobile networks)
- **Email Delivery**: Via SMTP with HTML templates
- **Push Notifications**: Via Firebase Cloud Messaging (Android + iOS)
- **Multi-Language Support**: English, Luganda, Lugbara, Alur
- **Delivery Tracking**: Real-time status updates with retry logic
- **User Preferences**: Channel, frequency, and quiet hours management

### Target Audience

- **Youth Beneficiaries**: 78% feature phone users + 22% smartphone users
- **NGOs**: Platform administrators and content moderators
- **Funders**: Program sponsors monitoring impact
- **Service Providers**: Training and consultancy providers
- **Mentors**: Industry experts providing guidance

---

## ✨ Features

### Core Features

- ✅ **SMS Notifications** (Africa's Talking)
    - Uganda phone number validation (+256, 0XX formats)
    - Delivery tracking with message IDs
    - Automatic retry on failure (max 3 attempts)
    - Character limit handling (160 single, 306 concatenated)

- ✅ **Email Notifications** (SMTP)
    - HTML templates with platform branding
    - Multi-part messages (text + HTML)
    - Attachment support
    - Bounce and complaint handling

- ✅ **Push Notifications** (Firebase)
    - Platform-specific configs (Android/iOS)
    - High-priority immediate delivery
    - Rich notifications with images
    - Custom data payloads
    - Badge counter management

- ✅ **Template Management**
    - Welcome notifications
    - Application status updates
    - Opportunity alerts
    - Mentorship reminders
    - Password reset emails

- ✅ **User Preferences**
    - Channel enable/disable (SMS, Email, Push)
    - Frequency control (immediate, daily, weekly digest)
    - Quiet hours (do not disturb)
    - Category filtering (updates, alerts, reminders, marketing)

- ✅ **Delivery Tracking**
    - Real-time status monitoring
    - Retry mechanism with exponential backoff
    - Delivery history per user
    - Analytics and reporting

### Advanced Features

- 🔄 **Async Processing**: Non-blocking with dedicated thread pools
- 📊 **Analytics**: Delivery rates, success metrics, user engagement
- 🔒 **Security**: JWT authentication, rate limiting, input validation
- ⚡ **Performance**: Redis caching (70% DB load reduction)
- 🏥 **Health Checks**: SMS/Email service monitoring
- 🔁 **Retry Logic**: Exponential backoff (5, 10, 20 minutes)

---

## 🏗️ Architecture

### High-Level Architecture
```
┌─────────────────────────────────────────────────────────────┐
│                     API Gateway (Port 8080)                 │
│  ┌──────────────────────────────────────────────────────┐  │
│  │  Rate Limiting │ CORS │ Security │ Circuit Breaker  │  │
│  └──────────────────────────────────────────────────────┘  │
└────────────────────────┬────────────────────────────────────┘
                         │
        ┌────────────────┴────────────────┐
        │                                 │
┌───────▼──────────┐            ┌────────▼──────────┐
│ Notification     │            │ Service Registry  │
│ Service (7077)   │◄───────────│ (Eureka - 8761)   │
└───────┬──────────┘            └───────────────────┘
        │
        ├──────────┬──────────┬──────────┬──────────┐
        │          │          │          │          │
   ┌────▼───┐ ┌───▼────┐ ┌───▼────┐ ┌──▼─────┐ ┌──▼─────┐
   │  SMS   │ │ Email  │ │  Push  │ │ Redis  │ │ MySQL  │
   │ (AT)   │ │ (SMTP) │ │ (FCM)  │ │ Cache  │ │   DB   │
   └────────┘ └────────┘ └────────┘ └────────┘ └────────┘
```

### Service Components
```
notification-service/
├── config/              # Configuration classes
│   ├── AsyncConfig              # Thread pool management
│   ├── RedisConfig              # Caching configuration
│   ├── FirebaseConfig           # Push notification setup
│   ├── SwaggerConfig            # API documentation
│   └── SchedulingConfig         # Retry job scheduler
├── controller/          # REST API endpoints
│   └── NotificationController   # HTTP request handlers
├── service/             # Business logic layer
│   ├── NotificationService      # Core notification delivery
│   ├── PreferenceService        # User preferences
│   ├── PushNotificationService  # Firebase integration
│   └── EmailTemplateService     # Template management
├── repository/          # Data access layer
│   └── NotificationLogRepository # Delivery tracking
├── entity/              # JPA entities
│   └── NotificationLog          # Database model
├── dto/                 # Data transfer objects
│   ├── SmsRequest               # SMS request payload
│   ├── EmailRequest             # Email request payload
│   ├── PushNotificationRequest  # Push request payload
│   └── NotificationPreferences  # User preferences
├── util/                # Utility classes
│   ├── PhoneNumberValidator     # Uganda phone validation
│   └── NotificationUtils        # Helper methods
└── exception/           # Exception handling
    ├── NotificationException    # Custom exceptions
    └── GlobalExceptionHandler   # Centralized error handling
```

---

## 🛠️ Technology Stack

### Backend Framework
- **Spring Boot 3.1.5**: Application framework
- **Java 17 (LTS)**: Programming language
- **Maven 3.9+**: Build automation

### Communication
- **Africa's Talking API**: SMS delivery (Uganda networks)
- **JavaMail API**: Email delivery via SMTP
- **Firebase Admin SDK 9.2.0**: Push notifications

### Data Layer
- **MySQL 8.0**: Primary database
- **Redis 7.0**: Distributed caching
- **JPA/Hibernate**: ORM framework
- **HikariCP**: Connection pooling

### Microservices
- **Spring Cloud 2022.0.4**: Microservices framework
- **Eureka Client**: Service discovery
- **OpenFeign**: Inter-service communication

### Monitoring
- **Spring Boot Actuator**: Health checks & metrics
- **Micrometer**: Application metrics
- **SLF4J + Logback**: Logging framework

### Documentation
- **Swagger/OpenAPI 3.0**: API documentation
- **SpringDoc 2.2.0**: Auto-generated docs

### Testing
- **JUnit 5**: Unit testing framework
- **Mockito**: Mocking framework
- **AssertJ**: Fluent assertions
- **Spring Boot Test**: Integration testing

---

## 📦 Prerequisites

### Required Software

| Software | Version | Purpose |
|----------|---------|---------|
| **Java JDK** | 17+ (LTS) | Runtime environment |
| **Maven** | 3.9+ | Build tool |
| **MySQL** | 8.0+ | Database |
| **Redis** | 7.0+ | Caching |
| **Docker** | 20.10+ | Containerization (optional) |
| **Git** | 2.x | Version control |

### Accounts & API Keys

1. **Africa's Talking** (SMS)
    - Sign up: https://account.africastalking.com
    - Get API key and username
    - Test with sandbox first

2. **SMTP Email Provider**
    - Gmail: Use App Password
    - SendGrid: Free tier (12K emails/month)
    - AWS SES: Pay-as-you-go

3. **Firebase** (Push Notifications)
    - Create project: https://console.firebase.google.com
    - Add Android + iOS apps
    - Download service account JSON

4. **Eureka Server** (Service Registry)
    - Run locally or deploy separately
    - Default: http://localhost:8761

---

## 🚀 Installation

### 1. Clone Repository
```bash
git clone https://github.com/youthconnect/notification-service.git
cd notification-service
```

### 2. Configure Environment Variables
```bash
# Copy environment template
cp .env.example .env

# Edit .env with your credentials
nano .env
```

**Required Variables** (minimum):
```bash
DB_PASSWORD=your_mysql_password
AFRICAS_TALKING_API_KEY=your_api_key
AFRICAS_TALKING_USERNAME=your_username
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_app_password
```

### 3. Set Up Firebase (Optional - for Push Notifications)
```bash
# Place Firebase service account JSON in resources
cp /path/to/firebase-service-account.json src/main/resources/

# Update .env
FIREBASE_PROJECT_ID=your-project-id
FIREBASE_SERVICE_ACCOUNT=firebase-service-account.json
```

### 4. Install Dependencies
```bash
mvn clean install -DskipTests
```

### 5. Set Up Database
```bash
# Create database
mysql -u root -p

mysql> CREATE DATABASE youth_connect_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
mysql> exit;

# Run schema (if not using Flyway)
mysql -u root -p youth_connect_db < database-schema.sql
```

### 6. Start Redis (if not running)
```bash
# Using Docker
docker run -d -p 6379:6379 --name redis redis:7-alpine

# Or install locally
brew install redis  # macOS
sudo apt install redis-server  # Ubuntu
```

---

## ⚙️ Configuration

### Application Properties

Edit `src/main/resources/application.yml`:
```yaml
spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  mail:
    host: ${SMTP_HOST}
    port: ${SMTP_PORT}
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}

africas-talking:
  api-key: ${AFRICAS_TALKING_API_KEY}
  username: ${AFRICAS_TALKING_USERNAME}
  sender-id: ${AFRICAS_TALKING_SENDER_ID:YouthConnect}

firebase:
  project-id: ${FIREBASE_PROJECT_ID}
  service-account-file: ${FIREBASE_SERVICE_ACCOUNT}
```

### Profiles

- **dev**: Development environment (detailed logging, mock APIs)
- **staging**: Pre-production testing
- **production**: Live environment (optimized, security hardened)

Switch profiles:
```bash
export SPRING_PROFILES_ACTIVE=production
```

---

## 🏃 Running the Service

### Development Mode
```bash
# Run with Maven
mvn spring-boot:run

# Run with specific profile
mvn spring-boot:run -Dspring-boot.run.profiles=dev

# Run JAR file
mvn clean package
java -jar target/notification-service-1.0.0.jar
```

### Production Mode
```bash
# Build production JAR
mvn clean package -Pprod -DskipTests

# Run with production profile
java -jar target/notification-service-1.0.0.jar --spring.profiles.active=production
```

### Docker (Recommended for Production)
```bash
# Build Docker image
docker build -t notification-service:1.0.0 .

# Run with Docker Compose
docker-compose up -d

# Check logs
docker-compose logs -f notification-service

# Stop services
docker-compose down
```

### Verify Service is Running
```bash
# Check health endpoint
curl http://localhost:7077/api/notifications/health

# Expected response:
# {"status":"UP","service":"notification-service",...}

# Check Swagger UI
open http://localhost:7077/swagger-ui.html
```

---

## 📚 API Documentation

### Swagger UI

Access interactive API documentation:
```
http://localhost:7077/swagger-ui.html
```

### Key Endpoints

#### 1. Send SMS
```http
POST /api/notifications/sms/send
Content-Type: application/json
Authorization: Bearer {jwt_token}

{
  "recipient": "+256701234567",
  "message": "Your application has been approved!",
  "messageType": "TRANSACTIONAL",
  "priority": 1,
  "userId": 123
}
```

#### 2. Send Email
```http
POST /api/notifications/email/send
Content-Type: application/json
Authorization: Bearer {jwt_token}

{
  "recipient": "user@example.com",
  "subject": "Welcome to Kwetu-Hub!",
  "htmlContent": "<html>...</html>",
  "textContent": "Welcome...",
  "userId": 123
}
```

#### 3. Send Welcome Notification
```http
POST /api/notifications/welcome
Content-Type: application/json
Authorization: Bearer {jwt_token}

{
  "userId": 123,
  "email": "user@example.com",
  "phoneNumber": "+256701234567",
  "firstName": "John",
  "userRole": "YOUTH",
  "preferredLanguage": "en"
}
```

#### 4. Health Check
```http
GET /api/notifications/health
```

#### 5. Get Notification Stats
```http
GET /api/notifications/stats?startDate=2025-01-01&endDate=2025-01-31
Authorization: Bearer {jwt_token}
```

#### 6. Get User Notification History
```http
GET /api/notifications/user/{userId}/history?limit=50
Authorization: Bearer {jwt_token}
```

---

## 🧪 Testing

### Run All Tests
```bash
mvn test
```

### Run Specific Test Class
```bash
mvn test -Dtest=EmailServiceTests
mvn test -Dtest=SmsServiceTests
mvn test -Dtest=NotificationControllerTest
```

### Run Tests with Coverage