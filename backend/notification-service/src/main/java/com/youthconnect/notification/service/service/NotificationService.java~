package com.youthconnect.notification.service.service;

import com.youthconnect.notification.service.dto.*;
import com.youthconnect.notification.service.entity.NotificationLog;
import com.youthconnect.notification.service.repository.NotificationLogRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import jakarta.mail.internet.MimeMessage;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.CompletableFuture;

/**
 * ═══════════════════════════════════════════════════════════════════════════
 * NOTIFICATION SERVICE - PRODUCTION-READY IMPLEMENTATION
 * ═══════════════════════════════════════════════════════════════════════════
 *
 * Core notification delivery service handling:
 * - SMS via Africa's Talking API
 * - Email via SMTP (Gmail/Custom)
 * - Multi-language support (English, Luganda, Lugbara, Alur)
 * - Automatic retry with exponential backoff
 * - Delivery tracking and analytics
 * - Rate limiting protection
 *
 * @author Douglas Kings Kato
 * @version 2.0
 * @since 2025-01-15
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class NotificationService {

    // =========================================================================
    // DEPENDENCIES (Constructor Injection via @RequiredArgsConstructor)
    // =========================================================================

    private final NotificationLogRepository notificationLogRepository;
    private final JavaMailSender mailSender;
    private final RestTemplate restTemplate;

    // =========================================================================
    // CONFIGURATION PROPERTIES
    // =========================================================================

    @Value("${africas-talking.api-key}")
    private String africasTalkingApiKey;

    @Value("${africas-talking.username}")
    private String africasTalkingUsername;

    @Value("${africas-talking.sender-id:YouthConnect}")
    private String senderIdDefault;

    @Value("${africas-talking.base-url:https://api.africastalking.com/version1}")
    private String africasTalkingBaseUrl;

    @Value("${spring.mail.username}")
    private String emailFrom;

    @Value("${app.notification.retry-attempts:3}")
    private int maxRetryAttempts;

    @Value("${app.notification.batch-size:100}")
    private int batchSize;

    // =========================================================================
    // SMS DELIVERY - AFRICA'S TALKING API
    // =========================================================================

    /**
     * Send SMS notification via Africa's Talking API.
     *
     * Process Flow:
     * 1. Create notification log (status: PENDING)
     * 2. Validate phone number format (Uganda: +256...)
     * 3. Call Africa's Talking API
     * 4. Handle response and update status
     * 5. Schedule retry if failed (max 3 attempts)
     *
     * @param request SMS request containing recipient, message, metadata
     * @return CompletableFuture with delivery status
     */
    @Async("notificationTaskExecutor")
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public CompletableFuture<Map<String, Object>> sendSms(SmsRequest request) {

        log.info("📱 SMS Request: recipient={}, type={}, priority={}",
                maskPhone(request.getRecipient()),
                request.getMessageType(),
                request.getPriority());

        // Step 1: Create notification log for tracking
        NotificationLog notificationLog = createNotificationLog(
                request.getUserId(),
                NotificationLog.NotificationType.SMS,
                request.getRecipient(),
                null, // SMS doesn't have subject
                request.getMessage()
        );

        try {
            // Step 2: Validate phone number
            String validatedPhone = validateAndFormatUgandaPhone(request.getRecipient());

            // Step 3: Prepare API request
            String apiUrl = africasTalkingBaseUrl + "/messaging";
            HttpHeaders headers = createAfricasTalkingHeaders();
            String requestBody = buildSmsRequestBody(
                    validatedPhone,
                    request.getMessage(),
                    request.getSenderId() != null ? request.getSenderId() : senderIdDefault
            );

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);

            // Step 4: Call Africa's Talking API
            log.debug("🌍 Calling Africa's Talking API: {}", apiUrl);
            ResponseEntity<Map> response = restTemplate.exchange(
                    apiUrl,
                    HttpMethod.POST,
                    entity,
                    Map.class
            );

            // Step 5: Process response
            if (response.getStatusCode().is2xxSuccessful()) {
                String messageId = extractMessageId(response.getBody());
                updateNotificationSuccess(notificationLog, messageId);

                log.info("✅ SMS sent successfully: id={}, recipient={}",
                        messageId, maskPhone(validatedPhone));

                return CompletableFuture.completedFuture(buildSuccessResponse(
                        messageId, validatedPhone
                ));
            } else {
                throw new RuntimeException("Unexpected response: " + response.getStatusCode());
            }

        } catch (Exception e) {
            log.error("❌ Email delivery failed: recipient={}, error={}",
                    request.getRecipient(), e.getMessage());

            updateNotificationFailure(notificationLog, e.getMessage());

            return CompletableFuture.completedFuture(buildFailureResponse(
                    e.getMessage(), false // Email retries handled by scheduled job
            ));
        }
    }

    // =========================================================================
    // WELCOME NOTIFICATIONS (Multi-Channel)
    // =========================================================================

    /**
     * Send welcome notification via both SMS and Email.
     * Used when new users register on the platform.
     *
     * @param request Welcome notification request
     * @return CompletableFuture with results for both channels
     */
    @Async("notificationTaskExecutor")
    public CompletableFuture<Map<String, Object>> sendWelcomeNotification(
            WelcomeNotificationRequest request) {

        log.info("🎉 Welcome notification for user: id={}, role={}",
                request.getUserId(), request.getUserRole());

        Map<String, Object> results = new HashMap<>();
        results.put("success", true);
        results.put("userId", request.getUserId());

        Map<String, Object> smsResult = new HashMap<>();
        Map<String, Object> emailResult = new HashMap<>();

        // Send welcome SMS
        if (request.getPhoneNumber() != null && !request.getPhoneNumber().isBlank()) {
            String smsMessage = buildWelcomeSmsMessage(
                    request.getFirstName(),
                    request.getUserRole(),
                    request.getPreferredLanguage()
            );

            SmsRequest smsRequest = SmsRequest.builder()
                    .userId(request.getUserId())
                    .recipient(request.getPhoneNumber())
                    .message(smsMessage)
                    .messageType("TRANSACTIONAL")
                    .priority(1)
                    .build();

            try {
                smsResult = sendSms(smsRequest).get(); // Wait for SMS completion
            } catch (Exception e) {
                log.error("SMS failed in welcome notification: {}", e.getMessage());
                smsResult.put("success", false);
                smsResult.put("error", e.getMessage());
            }
        }

        // Send welcome email
        if (request.getEmail() != null && !request.getEmail().isBlank()) {
            String emailHtml = buildWelcomeEmailHtml(
                    request.getFirstName(),
                    request.getUserRole()
            );

            EmailRequest emailRequest = EmailRequest.builder()
                    .userId(request.getUserId())
                    .recipient(request.getEmail())
                    .subject("Welcome to Kwetu-Hub Uganda! 🇺🇬")
                    .htmlContent(emailHtml)
                    .textContent("Welcome to Kwetu-Hub Uganda, " + request.getFirstName() + "!")
                    .build();

            try {
                emailResult = sendEmail(emailRequest).get(); // Wait for email completion
            } catch (Exception e) {
                log.error("Email failed in welcome notification: {}", e.getMessage());
                emailResult.put("success", false);
                emailResult.put("error", e.getMessage());
            }
        }

        results.put("sms", smsResult);
        results.put("email", emailResult);

        return CompletableFuture.completedFuture(results);
    }

    /**
     * Builds multi-language welcome SMS message.
     * Supports: English (en), Luganda (lg), Lugbara (lgb), Alur (lur)
     */
    private String buildWelcomeSmsMessage(String name, String role, String language) {

        Map<String, String> templates = Map.of(
                "en", String.format(
                        "Welcome %s! You've joined Kwetu-Hub as %s. " +
                                "Explore opportunities at kwetuhub.ug or dial *256#. Let's grow together! 🌱",
                        name, role
                ),
                "lg", String.format(
                        "Tukusiimye %s! Oyingidde mu Kwetu-Hub nga %s. " +
                                "Lambula kwetuhub.ug oba yingiza *256#. Tukule wamu! 🌱",
                        name, role
                ),
                "lur", String.format(
                        "Pito %s! In donyo Kwetu-Hub calo %s. " +
                                "Yab kwetuhub.ug onyo col *256#. Wa dongo kacel! 🌱",
                        name, role
                ),
                "lgb", String.format(
                        "Candiru %s! E yo Kwetu-Hub 'diyi ria %s. " +
                                "Kal kwetuhub.ug ote drial *256#. Ma ri oru oci! 🌱",
                        name, role
                )
        );

        return templates.getOrDefault(
                language != null ? language.toLowerCase() : "en",
                templates.get("en")
        );
    }

    /**
     * Builds HTML welcome email with platform branding.
     */
    private String buildWelcomeEmailHtml(String name, String role) {
        return String.format("""
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Welcome to Kwetu-Hub Uganda</title>
                <style>
                    body {
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        line-height: 1.6;
                        color: #333;
                        background-color: #f4f4f4;
                        margin: 0;
                        padding: 0;
                    }
                    .container {
                        max-width: 600px;
                        margin: 20px auto;
                        background: white;
                        border-radius: 10px;
                        overflow: hidden;
                        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    }
                    .header {
                        background: linear-gradient(135deg, #2E7D32 0%%, #66BB6A 100%%);
                        color: white;
                        padding: 40px 20px;
                        text-align: center;
                    }
                    .header h1 {
                        margin: 0;
                        font-size: 28px;
                        font-weight: 600;
                    }
                    .content {
                        padding: 40px 30px;
                    }
                    .content h2 {
                        color: #2E7D32;
                        margin-top: 0;
                    }
                    .features {
                        background: #f9f9f9;
                        border-left: 4px solid #2E7D32;
                        padding: 20px;
                        margin: 20px 0;
                    }
                    .button {
                        display: inline-block;
                        background: #2E7D32;
                        color: white;
                        padding: 14px 30px;
                        text-decoration: none;
                        border-radius: 5px;
                        font-weight: 600;
                        margin: 20px 0;
                    }
                    .ussd-box {
                        background: #E8F5E9;
                        border: 2px dashed #2E7D32;
                        border-radius: 8px;
                        padding: 20px;
                        text-align: center;
                        margin: 20px 0;
                    }
                    .ussd-code {
                        font-size: 32px;
                        font-weight: bold;
                        color: #1B5E20;
                        letter-spacing: 3px;
                    }
                    .footer {
                        background: #f4f4f4;
                        padding: 20px;
                        text-align: center;
                        font-size: 14px;
                        color: #666;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>🇺🇬 Welcome to Kwetu-Hub Uganda!</h1>
                        <p>Empowering Uganda's Youth for Success</p>
                    </div>
                    
                    <div class="content">
                        <h2>Hello %s! 👋</h2>
                        <p>Thank you for joining <strong>Kwetu-Hub Uganda</strong> as a <strong>%s</strong>!</p>
                        
                        <div class="features">
                            <strong>🎯 What You Can Do:</strong>
                            <ul>
                                <li>💰 Access grants and loans for your business</li>
                                <li>💼 Find job opportunities from verified employers</li>
                                <li>📚 Learn new skills through audio and video modules</li>
                                <li>🤝 Connect with experienced mentors</li>
                            </ul>
                        </div>
                        
                        <center>
                            <a href="https://kwetuhub.ug/dashboard" class="button">
                                🚀 Go to Dashboard
                            </a>
                        </center>
                        
                        <div class="ussd-box">
                            <p><strong>📱 No Smartphone? No Problem!</strong></p>
                            <p>Access Kwetu-Hub from any phone by dialing:</p>
                            <div class="ussd-code">*256#</div>
                        </div>
                    </div>
                    
                    <div class="footer">
                        <p>Kwetu-Hub Uganda - Youth Entrepreneurship Platform</p>
                        <p>© 2025 Kwetu-Hub Uganda. All rights reserved.</p>
                    </div>
                </div>
            </body>
            </html>
            """, name, role);
    }

    // =========================================================================
    // USSD CONFIRMATION NOTIFICATION
    // =========================================================================

    /**
     * Send USSD registration confirmation via SMS.
     */
    @Async("notificationTaskExecutor")
    public CompletableFuture<Map<String, Object>> sendUssdConfirmation(
            UssdConfirmationRequest request) {

        String message = String.format(
                "✅ Welcome %s! Your Kwetu-Hub registration via USSD is complete. " +
                        "Confirmation code: %s. Access anytime by dialing *256# or visit kwetuhub.ug.",
                request.getUserName(),
                request.getConfirmationCode()
        );

        SmsRequest smsRequest = SmsRequest.builder()
                .recipient(request.getPhoneNumber())
                .message(message)
                .messageType("TRANSACTIONAL")
                .priority(1)
                .build();

        return sendSms(smsRequest);
    }

    // =========================================================================
    // RETRY MECHANISM (Scheduled Task)
    // =========================================================================

    /**
     * Automatically retry failed notifications.
     * Runs every 5 minutes, implements exponential backoff.
     */
    @Scheduled(fixedDelay = 300000) // 5 minutes
    @Transactional
    public void retryFailedNotifications() {
        log.debug("🔄 Checking for notifications to retry...");

        List<NotificationLog> pendingRetries =
                notificationLogRepository.findPendingRetries(LocalDateTime.now());

        if (pendingRetries.isEmpty()) {
            log.debug("✓ No notifications pending retry");
            return;
        }

        log.info("📋 Found {} notifications to retry", pendingRetries.size());

        for (NotificationLog notification : pendingRetries) {
            try {
                log.info("🔄 Retrying notification: id={}, type={}, attempt={}",
                        notification.getId(),
                        notification.getNotificationType(),
                        notification.getRetryCount() + 1);

                if (notification.getNotificationType() == NotificationLog.NotificationType.SMS) {
                    retrySms(notification);
                } else if (notification.getNotificationType() == NotificationLog.NotificationType.EMAIL) {
                    retryEmail(notification);
                }

            } catch (Exception e) {
                log.error("❌ Retry failed for notification {}: {}",
                        notification.getId(), e.getMessage());
            }
        }
    }

    /**
     * Retry SMS notification
     */
    private void retrySms(NotificationLog notification) {
        SmsRequest retryRequest = SmsRequest.builder()
                .userId(notification.getUserId())
                .recipient(notification.getRecipient())
                .message(notification.getContent())
                .messageType("TRANSACTIONAL")
                .priority(2)
                .build();

        sendSms(retryRequest);
    }

    /**
     * Retry Email notification
     */
    private void retryEmail(NotificationLog notification) {
        EmailRequest retryRequest = EmailRequest.builder()
                .userId(notification.getUserId())
                .recipient(notification.getRecipient())
                .subject(notification.getSubject())
                .textContent(notification.getContent())
                .build();

        sendEmail(retryRequest);
    }

    // =========================================================================
    // HEALTH CHECK METHODS
    // =========================================================================

    /**
     * Check SMS service health by pinging Africa's Talking API
     * Returns Map with "healthy" boolean and additional details
     */
    public Map<String, Object> checkSmsServiceHealth() {
        Map<String, Object> healthInfo = new HashMap<>();

        try {
            long startTime = System.currentTimeMillis();

            // Simple health check: try to reach the API
            String healthUrl = africasTalkingBaseUrl + "/messaging";
            HttpHeaders headers = createAfricasTalkingHeaders();
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    healthUrl,
                    HttpMethod.OPTIONS, // OPTIONS request for health check
                    entity,
                    String.class
            );

            long responseTime = System.currentTimeMillis() - startTime;

            healthInfo.put("healthy", response.getStatusCode().is2xxSuccessful());
            healthInfo.put("status", "UP");
            healthInfo.put("provider", "AFRICAS_TALKING");
            healthInfo.put("responseTime", responseTime);
            healthInfo.put("timestamp", LocalDateTime.now());

        } catch (Exception e) {
            log.error("SMS service health check failed: {}", e.getMessage());
            healthInfo.put("healthy", false);
            healthInfo.put("status", "DOWN");
            healthInfo.put("provider", "AFRICAS_TALKING");
            healthInfo.put("error", e.getMessage());
            healthInfo.put("timestamp", LocalDateTime.now());
        }

        return healthInfo;
    }

    /**
     * Check email service health by verifying mail sender configuration
     * Returns Map with "healthy" boolean and additional details
     */
    public Map<String, Object> checkEmailServiceHealth() {
        Map<String, Object> healthInfo = new HashMap<>();

        try {
            long startTime = System.currentTimeMillis();

            // Simple check: can we create a MIME message?
            mailSender.createMimeMessage();

            long responseTime = System.currentTimeMillis() - startTime;

            healthInfo.put("healthy", true);
            healthInfo.put("status", "UP");
            healthInfo.put("provider", "SMTP");
            healthInfo.put("responseTime", responseTime);
            healthInfo.put("smtpHost", emailFrom);
            healthInfo.put("timestamp", LocalDateTime.now());

        } catch (Exception e) {
            log.error("Email service health check failed: {}", e.getMessage());
            healthInfo.put("healthy", false);
            healthInfo.put("status", "DOWN");
            healthInfo.put("provider", "SMTP");
            healthInfo.put("error", e.getMessage());
            healthInfo.put("timestamp", LocalDateTime.now());
        }

        return healthInfo;
    }

    // =========================================================================
    // NOTIFICATION LOG MANAGEMENT
    // =========================================================================

    /**
     * Create notification log entry with PENDING status
     */
    private NotificationLog createNotificationLog(
            Long userId,
            NotificationLog.NotificationType type,
            String recipient,
            String subject,
            String content) {

        NotificationLog log = NotificationLog.builder()
                .userId(userId)
                .notificationType(type)
                .recipient(recipient)
                .subject(subject)
                .content(content)
                .status(NotificationLog.NotificationStatus.PENDING)
                .retryCount(0)
                .maxRetries(maxRetryAttempts)
                .provider(type == NotificationLog.NotificationType.SMS ?
                        "AFRICAS_TALKING" : "SMTP")
                .createdAt(LocalDateTime.now())
                .build();

        return notificationLogRepository.save(log);
    }

    /**
     * Update notification log on successful delivery
     */
    private void updateNotificationSuccess(NotificationLog log, String providerId) {
        log.setStatus(NotificationLog.NotificationStatus.SENT);
        log.setSentAt(LocalDateTime.now());
        log.setProviderMessageId(providerId);
        log.setUpdatedAt(LocalDateTime.now());
        notificationLogRepository.save(log);
    }

    /**
     * Update notification log on delivery failure
     * Calculates next retry time with exponential backoff
     */
    private void updateNotificationFailure(NotificationLog log, String errorMessage) {
        log.setStatus(NotificationLog.NotificationStatus.FAILED);
        log.setErrorMessage(errorMessage);
        log.setRetryCount(log.getRetryCount() + 1);
        log.setUpdatedAt(LocalDateTime.now());

        // Calculate next retry time (exponential backoff)
        if (log.getRetryCount() < log.getMaxRetries()) {
            int delayMinutes = 5 * (int) Math.pow(2, log.getRetryCount() - 1);
            log.setNextRetryAt(LocalDateTime.now().plusMinutes(delayMinutes));

            log.info("📅 Next retry scheduled for notification {} in {} minutes",
                    log.getId(), delayMinutes);
        } else {
            log.warn("⚠️ Max retries reached for notification {}. Giving up.", log.getId());
        }

        notificationLogRepository.save(log);
    }

    // =========================================================================
    // RESPONSE BUILDERS
    // =========================================================================

    /**
     * Build success response map
     */
    private Map<String, Object> buildSuccessResponse(String messageId, String recipient) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", true);
        response.put("status", "SENT");
        response.put("recipient", maskPhone(recipient));
        if (messageId != null) {
            response.put("messageId", messageId);
        }
        response.put("timestamp", LocalDateTime.now());
        return response;
    }

    /**
     * Build failure response map
     */
    private Map<String, Object> buildFailureResponse(String error, boolean willRetry) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("status", "FAILED");
        response.put("error", error);
        response.put("willRetry", willRetry);
        response.put("timestamp", LocalDateTime.now());
        return response;
    }

    // =========================================================================
    // UTILITY METHODS
    // =========================================================================

    /**
     * Mask phone number for privacy in logs and responses.
     */
    private String maskPhone(String phoneNumber) {
        if (phoneNumber == null || phoneNumber.length() < 8) {
            return "****";
        }

        int length = phoneNumber.length();
        int keepStart = Math.min(4, length / 3);
        int keepEnd = Math.min(4, length / 3);

        return phoneNumber.substring(0, keepStart) +
                "****" +
                phoneNumber.substring(length - keepEnd);
    }

    // =========================================================================
    // ANALYTICS & REPORTING
    // =========================================================================

    /**
     * Get notification statistics for analytics dashboard
     */
    public Map<String, Object> getNotificationStats(LocalDateTime startDate, LocalDateTime endDate) {
        Map<String, Object> stats = new HashMap<>();

        // Total sent
        long totalSent = notificationLogRepository.countByStatusAndCreatedAtAfter(
                NotificationLog.NotificationStatus.SENT, startDate
        );

        // Total failed
        long totalFailed = notificationLogRepository.countByStatusAndCreatedAtAfter(
                NotificationLog.NotificationStatus.FAILED, startDate
        );

        // Total pending
        long totalPending = notificationLogRepository.countByStatusAndCreatedAtAfter(
                NotificationLog.NotificationStatus.PENDING, startDate
        );

        // Success rate
        double successRate = totalSent + totalFailed > 0 ?
                (double) totalSent / (totalSent + totalFailed) * 100 : 0;

        stats.put("totalSent", totalSent);
        stats.put("totalFailed", totalFailed);
        stats.put("totalPending", totalPending);
        stats.put("successRate", String.format("%.2f%%", successRate));
        stats.put("period", Map.of(
                "start", startDate,
                "end", endDate
        ));

        return stats;
    }

    /**
     * Get user notification history
     */
    public List<NotificationLog> getUserNotifications(Long userId, int limit) {
        List<NotificationLog> notifications =
                notificationLogRepository.findByUserIdOrderByCreatedAtDesc(userId);

        return notifications.stream()
                .limit(limit)
                .toList();
    }
}
            log.error("❌ SMS delivery failed: recipient={}, error={}",
                      maskPhone(request.getRecipient()), e.getMessage());

updateNotificationFailure(notificationLog, e.getMessage());

        return CompletableFuture.completedFuture(buildFailureResponse(
        e.getMessage(),
                    notificationLog.getRetryCount() < maxRetryAttempts
            ));
                    }
                    }

/**
 * Validates and formats Uganda phone numbers.
 * Accepts formats: +256701234567, 256701234567, 0701234567
 * Returns: +256701234567
 */
private String validateAndFormatUgandaPhone(String phoneNumber) {
    if (phoneNumber == null || phoneNumber.isBlank()) {
        throw new IllegalArgumentException("Phone number cannot be empty");
    }

    // Remove spaces and special characters except +
    String cleaned = phoneNumber.replaceAll("[^+0-9]", "");

    // Convert to international format
    if (cleaned.startsWith("0")) {
        cleaned = "+256" + cleaned.substring(1);
    } else if (cleaned.startsWith("256")) {
        cleaned = "+" + cleaned;
    } else if (!cleaned.startsWith("+256")) {
        throw new IllegalArgumentException("Invalid Uganda phone number format");
    }

    // Validate length (+256 + 9 digits = 13)
    if (cleaned.length() != 13) {
        throw new IllegalArgumentException(
                "Invalid phone number length. Expected +256XXXXXXXXX"
        );
    }

    return cleaned;
}

/**
 * Creates Africa's Talking API request headers.
 */
private HttpHeaders createAfricasTalkingHeaders() {
    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
    headers.set("apiKey", africasTalkingApiKey);
    headers.set("Accept", "application/json");
    return headers;
}

/**
 * Builds URL-encoded request body for Africa's Talking SMS API.
 */
private String buildSmsRequestBody(String recipient, String message, String senderId) {
    try {
        return String.format(
                "username=%s&to=%s&message=%s&from=%s",
                africasTalkingUsername,
                recipient,
                java.net.URLEncoder.encode(message, "UTF-8"),
                senderId
        );
    } catch (Exception e) {
        throw new RuntimeException("Failed to encode SMS request body", e);
    }
}

/**
 * Extracts message ID from Africa's Talking API response.
 */
@SuppressWarnings("unchecked")
private String extractMessageId(Map<String, Object> response) {
    try {
        Map<String, Object> smsData = (Map<String, Object>) response.get("SMSMessageData");
        List<Map<String, Object>> recipients = (List<Map<String, Object>>) smsData.get("Recipients");
        return (String) recipients.get(0).get("messageId");
    } catch (Exception e) {
        log.warn("⚠️ Could not extract message ID from response", e);
        return "UNKNOWN_" + System.currentTimeMillis();
    }
}

// =========================================================================
// EMAIL DELIVERY - SMTP
// =========================================================================

/**
 * Send email notification via configured SMTP server.
 *
 * @param request Email request with recipient, subject, content
 * @return CompletableFuture with delivery status
 */
@Async("notificationTaskExecutor")
@Transactional(propagation = Propagation.REQUIRES_NEW)
public CompletableFuture<Map<String, Object>> sendEmail(EmailRequest request) {

    log.info("📧 Email Request: recipient={}, subject={}",
            request.getRecipient(), request.getSubject());

    NotificationLog notificationLog = createNotificationLog(
            request.getUserId(),
            NotificationLog.NotificationType.EMAIL,
            request.getRecipient(),
            request.getSubject(),
            request.getTextContent()
    );

    try {
        // Create MIME message
        MimeMessage mimeMessage = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true, "UTF-8");

        // Set email properties
        helper.setFrom(emailFrom);
        helper.setTo(request.getRecipient());
        helper.setSubject(request.getSubject());

        // Set content (HTML with plain text fallback)
        if (request.getHtmlContent() != null && !request.getHtmlContent().isBlank()) {
            helper.setText(
                    request.getTextContent() != null ? request.getTextContent() : "",
                    request.getHtmlContent()
            );
        } else {
            helper.setText(request.getTextContent() != null ? request.getTextContent() : "");
        }

        // Send email
        mailSender.send(mimeMessage);

        // Update log
        updateNotificationSuccess(notificationLog, null);

        log.info("✅ Email sent successfully: recipient={}", request.getRecipient());

        return CompletableFuture.completedFuture(buildSuccessResponse(
                null, request.getRecipient()
        ));

    } catch (Exception e) {