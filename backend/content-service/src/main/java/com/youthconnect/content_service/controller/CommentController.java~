package com.youthconnect.content_service.controller;

import com.youthconnect.content_service.dto.request.CreateCommentRequest;
import com.youthconnect.content_service.dto.response.ApiResponse;
import com.youthconnect.content_service.dto.response.CommentDTO;
import com.youthconnect.content_service.service.ContentService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST Controller for Comments
 * Handles comment creation, retrieval, and threading
 */
@RestController
@RequestMapping("/api/content/comments")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Comments", description = "Comment management on posts")
public class CommentController {

    private final ContentService contentService;

    /**
     * Get all comments for a post
     */
    @GetMapping
    @Operation(summary = "Get comments", description = "Retrieves all comments for a post")
    public ResponseEntity<ApiResponse<List<CommentDTO>>> getCommentsByPostId(
            @Parameter(description = "Post ID")
            @RequestParam Long postId) {

        log.debug("GET /api/content/comments?postId={}", postId);

        List<CommentDTO> comments = contentService.getCommentsByPostId(postId);
        return ResponseEntity.ok(ApiResponse.success(comments));
    }

    /**
     * Create new comment
     */
    @PostMapping
    @Operation(summary = "Create comment", description = "Adds a comment to a post")
    public ResponseEntity<ApiResponse<CommentDTO>> createComment(
            @Valid @RequestBody CreateCommentRequest request,
            @Parameter(description = "Author user ID (from JWT in production)")
            @RequestHeader(value = "X-User-Id", required = false, defaultValue = "1") Long authorId) {

        log.info("POST /api/content/comments - Author: {}, Post: {}", authorId, request.getPostId());

        CommentDTO createdComment = contentService.createComment(request, authorId);
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(ApiResponse.success("Comment created successfully", createdComment));
    }
