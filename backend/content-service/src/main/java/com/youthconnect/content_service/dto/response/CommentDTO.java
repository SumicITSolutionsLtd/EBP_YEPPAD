package com.youthconnect.content_service.dto.response;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.youthconnect.content_service.entity.Post;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.Instant;
import java.util.List;

/**
 * Data Transfer Object (DTO) for Comment API responses.
 *
 * <p>This class represents a comment on a post in the community forum,
 * including support for threaded discussions, voting, and solution marking.</p>
 *
 * <p><strong>Key Features:</strong></p>
 * <ul>
 *   <li>Threaded comment support (up to 5 levels deep)</li>
 *   <li>Voting system (upvotes/downvotes)</li>
 *   <li>Solution marking for problem-solving discussions</li>
 *   <li>Author information enrichment</li>
 *   <li>User vote status tracking</li>
 * </ul>
 *
 * <p><strong>Usage Example:</strong></p>
 * <pre>
 * CommentDTO comment = CommentDTO.builder()
 *     .commentId(123L)
 *     .postId(456L)
 *     .authorId(789L)
 *     .commentText("Great solution! This worked for me.")
 *     .threadDepth(1)
 *     .upvotesCount(15)
 *     .downvotesCount(2)
 *     .isSolution(false)
 *     .build();
 * </pre>
 *
 * @author Douglas Kings Kato
 * @version 1.0
 * @since 2025-01-01
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonInclude(JsonInclude.Include.NON_NULL) // Exclude null fields from JSON
public class CommentDTO {

    /**
     * Unique identifier for the comment.
     * Auto-generated by the database.
     */
    private Long commentId;

    /**
     * ID of the post this comment belongs to.
     * Required field linking comment to parent post.
     */
    private Long postId;

    /**
     * ID of the user who authored this comment.
     * Links to the users table via user service.
     */
    private Long authorId;

    /**
     * The actual text content of the comment.
     * Minimum length: 5 characters
     * Maximum length: 2000 characters
     *
     * <p>Content is automatically moderated for:</p>
     * <ul>
     *   <li>Profanity and offensive language</li>
     *   <li>Spam patterns (excessive URLs, phone numbers)</li>
     *   <li>Harassment and hate speech</li>
     * </ul>
     */
    private String commentText;

    /**
     * ID of the parent comment if this is a reply.
     * Null for top-level comments.
     *
     * <p>Used to create threaded discussions where users can reply
     * directly to specific comments rather than just the post.</p>
     */
    private Long parentCommentId;

    /**
     * Depth level in the comment thread (0-5).
     *
     * <p>Thread depth levels:</p>
     * <ul>
     *   <li>0: Top-level comment (direct reply to post)</li>
     *   <li>1: Reply to a top-level comment</li>
     *   <li>2-5: Nested replies (maximum 5 levels)</li>
     * </ul>
     *
     * <p>Maximum depth of 5 is enforced to prevent excessively
     * nested threads that are hard to read.</p>
     */
    private Integer threadDepth;

    /**
     * Number of upvotes received on this comment.
     * Higher upvotes indicate community agreement or helpfulness.
     *
     * <p>Upvotes are used to:</p>
     * <ul>
     *   <li>Rank comments by helpfulness</li>
     *   <li>Calculate user reputation</li>
     *   <li>Identify valuable contributions</li>
     * </ul>
     */
    private Integer upvotesCount;

    /**
     * Number of downvotes received on this comment.
     * Higher downvotes indicate disagreement or low quality.
     *
     * <p>Downvotes help filter out:</p>
     * <ul>
     *   <li>Incorrect information</li>
     *   <li>Off-topic responses</li>
     *   <li>Low-quality contributions</li>
     * </ul>
     */
    private Integer downvotesCount;

    /**
     * Flag indicating if this comment has been marked as a solution.
     * Only applicable for FORUM_QUESTION post types.
     *
     * <p>Solution marking:</p>
     * <ul>
     *   <li>Only post author can mark a comment as the solution</li>
     *   <li>Only one comment per post can be marked as solution</li>
     *   <li>Solution author receives reputation boost</li>
     *   <li>Solutions are highlighted in the UI</li>
     * </ul>
     */
    private Boolean isSolution;

    /**
     * Flag indicating if this comment is approved by moderators.
     * False means comment is in moderation queue.
     *
     * <p>Auto-moderation rules:</p>
     * <ul>
     *   <li>Profanity filter triggers manual review</li>
     *   <li>New users may have all comments moderated</li>
     *   <li>Flagged users require approval</li>
     * </ul>
     */
    private Boolean isApproved;

    /**
     * Flag indicating if this comment is active (not deleted).
     * Soft delete approach - comment hidden but data retained.
     */
    private Boolean isActive;

    /**
     * Timestamp when comment was created.
     * Automatically set by database on insert.
     * Used for sorting comments by recency.
     */
    private Instant createdAt;

    /**
     * Timestamp when comment was last updated.
     * Automatically updated by database on modification.
     */
    private Instant updatedAt;

    // ========================================
    // ENRICHED FIELDS (NOT IN DATABASE)
    // ========================================

    /**
     * Author information enriched from User Service.
     *
     * <p>Contains:</p>
     * <ul>
     *   <li>Full name or username</li>
     *   <li>Profile picture URL</li>
     *   <li>User role (Youth, NGO, Mentor, etc.)</li>
     *   <li>Reputation score (optional)</li>
     * </ul>
     *
     * <p>Populated via Feign client call to User Service during DTO mapping.</p>
     */
    private UserBasicInfoDTO author;

    /**
     * List of nested replies to this comment.
     * Populated recursively for threaded display.
     *
     * <p>Only populated when:</p>
     * <ul>
     *   <li>Explicitly requested (to avoid N+1 queries)</li>
     *   <li>Thread depth is less than maximum</li>
     *   <li>Client specifies ?includeReplies=true</li>
     * </ul>
     *
     * <p>For performance, replies are typically loaded separately
     * via pagination when user expands a thread.</p>
     */
    private List<CommentDTO> replies;

    /**
     * Current user's vote on this comment (if any).
     *
     * <p>Possible values:</p>
     * <ul>
     *   <li>"UPVOTE" - User has upvoted this comment</li>
     *   <li>"DOWNVOTE" - User has downvoted this comment</li>
     *   <li>null - User has not voted</li>
     * </ul>
     *
     * <p>This field enables the UI to show vote state:</p>
     * <ul>
     *   <li>Highlight the upvote button if user upvoted</li>
     *   <li>Highlight the downvote button if user downvoted</li>
     *   <li>Allow toggling votes</li>
     * </ul>
     */
    private String userVote; // "UPVOTE", "DOWNVOTE", or null

    // ========================================
    // COMPUTED FIELDS
    // ========================================

    /**
     * Net score calculated as upvotes minus downvotes.
     * Used for sorting comments by popularity.
     *
     * <p>Formula: netScore = upvotesCount - downvotesCount</p>
     *
     * <p>Higher scores indicate more valuable content.
     * Negative scores may trigger additional moderation.</p>
     *
     * @return The net vote score
     */
    public Integer getNetScore() {
        return (upvotesCount != null ? upvotesCount : 0) -
                (downvotesCount != null ? downvotesCount : 0);
    }

    /**
     * Checks if this is a top-level comment (direct reply to post).
     *
     * @return true if threadDepth is 0 or parentCommentId is null
     */
    public Boolean isTopLevel() {
        return threadDepth == null || threadDepth == 0;
    }

    /**
     * Checks if this comment can have replies.
     * Comments at maximum depth (5) cannot be replied to.
     *
     * @return true if threadDepth < 5
     */
    public Boolean canReply() {
        return threadDepth != null && threadDepth < 5;
    }

    /**
     * Checks if comment has any replies.
     *
     * @return true if replies list is not null and not empty
     */
    public Boolean hasReplies() {
        return replies != null && !replies.isEmpty();
    }

    /**
     * Gets the number of direct replies to this comment.
     *
     * @return Count of replies, or 0 if no replies
     */
    public Integer getReplyCount() {
        return replies != null ? replies.size() : 0;
    }

    // ========================================
    // NESTED CLASS: USER BASIC INFO DTO
    // ========================================

    /**
     * Nested DTO for basic user information displayed with comments.
     * Avoids circular dependencies and reduces payload size.
     */
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    public static class UserBasicInfoDTO {

        /**
         * User's unique identifier.
         */
        private Long userId;

        /**
         * Display name shown with comments.
         * Usually first name + last name for Youth users.
         * Organization name for NGO/Funder users.
         */
        private String displayName;

        /**
         * URL to user's profile picture.
         * Null if user hasn't uploaded a profile picture.
         */
        private String profilePictureUrl;

        /**
         * User's role in the platform.
         * Used to display role badges (e.g., "NGO", "Mentor").
         */
        private String role;

        /**
         * User reputation score (optional).
         * Calculated based on helpful contributions.
         * Higher reputation indicates trusted community member.
         */
        private Integer reputationScore;
    }
}