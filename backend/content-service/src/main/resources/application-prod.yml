# ========================================
# CONTENT SERVICE - PRODUCTION PROFILE
# ========================================
# This configuration is activated with: --spring.profiles.active=prod
# Optimized for production with security, performance, and monitoring

# ========================================
# SERVER CONFIGURATION
# ========================================
server:
  port: 8084
  # Minimal error exposure for security
  error:
    include-message: never # Don't expose internal errors
    include-binding-errors: never
    include-stacktrace: never # Never show stack traces in production
    include-exception: false

  # Compression for bandwidth optimization
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024

  # Connection timeouts
  tomcat:
    connection-timeout: 20000
    threads:
      max: 200 # Handle high concurrency
      min-spare: 10

# ========================================
# SPRING CONFIGURATION
# ========================================
spring:
  application:
    name: content-service

  # ========================================
  # DATABASE CONFIGURATION (Production MySQL)
  # ========================================
  datasource:
    # Use environment variables for sensitive data
    url: ${DB_URL:jdbc:mysql://prod-db-server:3306/epb_db?useSSL=true&serverTimezone=Africa/Nairobi}
    username: ${DB_USERNAME:epb_user}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

    # HikariCP Connection Pool (Production Tuned)
    hikari:
      pool-name: ContentServiceProdPool
      maximum-pool-size: 50 # Handle high load
      minimum-idle: 10 # Keep connections ready
      connection-timeout: 30000
      idle-timeout: 600000 # 10 minutes
      max-lifetime: 1800000 # 30 minutes
      auto-commit: true
      connection-test-query: SELECT 1
      # Production-specific settings
      leak-detection-threshold: 60000 # Detect connection leaks
      register-mbeans: true # Enable JMX monitoring

  # ========================================
  # JPA / HIBERNATE CONFIGURATION
  # ========================================
  jpa:
    hibernate:
      ddl-auto: validate # NEVER auto-update in production!
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl

    # Performance optimizations
    show-sql: false # Don't log SQL in production
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 50 # Larger batch size
          fetch_size: 50
        order_inserts: true
        order_updates: true
        enable_lazy_load_no_trans: false # Prevent N+1 queries
        # Production query optimization
        query:
          in_clause_parameter_padding: true
          plan_cache_max_size: 2048
        # Second-level cache (if using)
        cache:
          use_second_level_cache: false
          use_query_cache: false

    open-in-view: false

  # ========================================
  # CACHE CONFIGURATION (Production)
  # ========================================
  cache:
    type: caffeine
    cache-names:
      - learningModules
      - moduleProgress
      - posts
      - comments
      - postVotes
      - commentVotes
      - userPreferences
      - moderationQueue
      - trendingPosts

    caffeine:
      # Production cache settings (longer TTL)
      spec: maximumSize=10000,expireAfterWrite=3600s # 1 hour

# ========================================
# EUREKA CLIENT CONFIGURATION
# ========================================
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://eureka-server:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
    healthcheck:
      enabled: true

  instance:
    hostname: ${HOSTNAME:content-service}
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    instance-id: ${spring.application.name}:${INSTANCE_ID:${random.value}}
    metadata-map:
      version: 1.0.0
      environment: production
      description: "Content Management Service - Production"

# ========================================
# FEIGN CLIENT CONFIGURATION
# ========================================
feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 10000
        loggerLevel: BASIC # Minimal logging in production

  circuitbreaker:
    enabled: true

# ========================================
# RESILIENCE4J (Circuit Breaker)
# ========================================
resilience4j:
  circuitbreaker:
    instances:
      userService:
        slidingWindowSize: 100
        failureRateThreshold: 50
        waitDurationInOpenState: 60s
        permittedNumberOfCallsInHalfOpenState: 10
        slowCallDurationThreshold: 10s
        slowCallRateThreshold: 60

      notificationService:
        slidingWindowSize: 100
        failureRateThreshold: 50
        waitDurationInOpenState: 60s
        permittedNumberOfCallsInHalfOpenState: 10

      fileService:
        slidingWindowSize: 100
        failureRateThreshold: 50
        waitDurationInOpenState: 60s
        permittedNumberOfCallsInHalfOpenState: 10

# ========================================
# ACTUATOR (Limited Exposure in Production)
# ========================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus # Only essential endpoints
      base-path: /actuator

  endpoint:
    health:
      show-details: when-authorized # Hide details from public
      probes:
        enabled: true

  health:
    circuitbreakers:
      enabled: true
    diskspace:
      enabled: true
      threshold: 10GB

  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: production
      instance: ${INSTANCE_ID:unknown}

# ========================================
# LOGGING CONFIGURATION (Production)
# ========================================
logging:
  level:
    root: WARN
    com.youthconnect.content_service: INFO # Application logs
    org.springframework.web: WARN
    org.springframework.cloud: WARN
    org.hibernate.SQL: WARN # No SQL logging in production
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    feign: WARN

  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

  file:
    name: /var/log/content-service/content-service.log
    max-size: 100MB
    max-history: 30 # Keep 30 days
    total-size-cap: 3GB

# ========================================
# SPRINGDOC (Swagger) - Disabled in Production
# ========================================
springdoc:
  api-docs:
    enabled: false # Disable API docs in production
  swagger-ui:
    enabled: false # Disable Swagger UI in production

# ========================================
# APPLICATION-SPECIFIC PROPERTIES
# ========================================
app:
  content:
    # Module configuration
    module:
      max-duration-minutes: 120
      supported-languages: en,lg,lur,lgb
      default-language: en
      audio-formats: mp3,m4a,wav
      max-audio-size-mb: 50

    # Community configuration
    community:
      max-post-length: 5000
      max-comment-length: 2000
      max-title-length: 255
      max-thread-depth: 5
      posts-per-page: 20
      auto-moderation-enabled: true

    # Moderation settings (strict in production)
    moderation:
      prohibited-words:
        - spam
        - scam
        - fraud
        - abuse
        - hate
      max-urls-per-post: 2
      caps-threshold: 0.5
      phone-number-regex: "\\+?256\\d{9}"

  # Service URLs (use environment variables)
  services:
    user-service:
      name: user-service
      url: ${USER_SERVICE_URL:http://user-service}

    notification-service:
      name: notification-service
      url: ${NOTIFICATION_SERVICE_URL:http://notification-service}

    file-service:
      name: file-management-service
      url: ${FILE_SERVICE_URL:http://file-management-service}

    analytics-service:
      name: analytics-service
      url: ${ANALYTICS_SERVICE_URL:http://analytics-service}

# ========================================
# SECURITY SETTINGS
# ========================================
# Additional security headers are handled by API Gateway/Nginx
# This service focuses on application-level security

# Disable unnecessary Spring Boot features in production
spring:
  devtools:
    restart:
      enabled: false
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration