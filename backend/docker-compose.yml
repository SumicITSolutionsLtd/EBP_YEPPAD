# =================================================================================
# Entrepreneurship Booster Platform - Complete Docker Compose Configuration
# Version: 2.0 - Production Ready with Monitoring
# Last Updated: January 2025
# =================================================================================
#
# QUICK START:
#   Development: ./scripts/setup.sh dev && docker-compose up -d
#   Production:  ./scripts/setup.sh prod && docker-compose -f docker-compose.yml up -d
#   Logs:        docker-compose logs -f [service-name]
#   Stop:        docker-compose down
#   Clean:       docker-compose down -v --remove-orphans
#
# SERVICE URLS:
#   API Gateway:      http://localhost:8080
#   Eureka Dashboard: http://localhost:8761
#   Grafana:          http://localhost:3000 (admin/Admin2025Secure!)
#   Prometheus:       http://localhost:9090
#   MySQL:            localhost:3307
#   Redis:            localhost:6379
#
# =================================================================================

version: '3.8'

# =================================================================================
# NETWORKS
# =================================================================================
networks:
  epb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =================================================================================
# VOLUMES
# =================================================================================
volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  file-uploads:
    driver: local

# =================================================================================
# SERVICES
# =================================================================================
services:

  # -------------------------------------------------------------------------------
  # DATABASE SERVICES
  # -------------------------------------------------------------------------------

  mysql:
    image: mysql:8.0
    container_name: epb-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      TZ: Africa/Kampala
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
      - ./logs/mysql:/var/log/mysql
    networks:
      - epb-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max_connections=500
      - --log-error=/var/log/mysql/error.log
      - --slow_query_log=1
      - --slow_query_log_file=/var/log/mysql/slow-query.log
      - --long_query_time=2

  redis:
    image: redis:7.0-alpine
    container_name: epb-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "redis-aof.aof"
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - epb-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # -------------------------------------------------------------------------------
  # INFRASTRUCTURE SERVICES
  # -------------------------------------------------------------------------------

  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    container_name: epb-service-registry
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8761
      EUREKA_INSTANCE_HOSTNAME: service-registry
    ports:
      - "8761:8761"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: epb-api-gateway
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
    ports:
      - "8080:8080"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      service-registry:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # -------------------------------------------------------------------------------
  # CORE BUSINESS SERVICES
  # -------------------------------------------------------------------------------

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: epb-user-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8081
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: epb-auth-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8082
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TOKEN_EXPIRY: ${JWT_ACCESS_TOKEN_EXPIRY:-900}
      JWT_REFRESH_TOKEN_EXPIRY: ${JWT_REFRESH_TOKEN_EXPIRY:-604800}
    ports:
      - "8082:8082"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  opportunity-service:
    build:
      context: ./opportunity-service
      dockerfile: Dockerfile
    container_name: epb-opportunity-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8083
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8083:8083"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  content-service:
    build:
      context: ./content-service
      dockerfile: Dockerfile
    container_name: epb-content-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8084
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8084:8084"
    volumes:
      - ./logs/service-logs:/app/logs
      - file-uploads:/app/uploads
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      service-registry:
        condition: service_healthy

  mentor-service:
    build:
      context: ./mentor-service
      dockerfile: Dockerfile
    container_name: epb-mentor-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8085
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8085:8085"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      service-registry:
        condition: service_healthy

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: epb-notification-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8086
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      AFRICAS_TALKING_USERNAME: ${AFRICAS_TALKING_USERNAME}
      AFRICAS_TALKING_API_KEY: ${AFRICAS_TALKING_API_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    ports:
      - "8086:8086"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      service-registry:
        condition: service_healthy

  ussd-service:
    build:
      context: ./ussd-service
      dockerfile: Dockerfile
    container_name: epb-ussd-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8087
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      USSD_SHORT_CODE: ${USSD_SHORT_CODE}
    ports:
      - "8087:8087"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      service-registry:
        condition: service_healthy

  file-management-service:
    build:
      context: ./file-management-service
      dockerfile: Dockerfile
    container_name: epb-file-management-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8088
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      STORAGE_PATH: ${STORAGE_PATH:-/app/uploads}
    ports:
      - "8088:8088"
    volumes:
      - ./logs/service-logs:/app/logs
      - file-uploads:/app/uploads
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      service-registry:
        condition: service_healthy

  ai-recommendation-service:
    build:
      context: ./ai-recommendation-service
      dockerfile: Dockerfile
    container_name: epb-ai-recommendation-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8089
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8089:8089"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      service-registry:
        condition: service_healthy

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: epb-analytics-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8090
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8090:8090"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      mysql:
        condition: service_healthy
      service-registry:
        condition: service_healthy

  edge-functions:
    build:
      context: ./edge_functions
      dockerfile: Dockerfile
    container_name: epb-edge-functions
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_ENV:-dev}
      SERVER_PORT: 8091
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
    ports:
      - "8091:8091"
    volumes:
      - ./logs/service-logs:/app/logs
    networks:
      - epb-network
    depends_on:
      service-registry:
        condition: service_healthy

  # -------------------------------------------------------------------------------
  # MONITORING SERVICES
  # -------------------------------------------------------------------------------

  prometheus:
    image: prom/prometheus:latest
    container_name: epb-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
      - ./logs/monitoring:/var/log/prometheus
    networks:
      - epb-network
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: epb-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SERVER_ROOT_URL: http://localhost:3000/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: 'true'
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./logs/monitoring/grafana:/var/log/grafana
    networks:
      - epb-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # -------------------------------------------------------------------------------
  # REVERSE PROXY
  # -------------------------------------------------------------------------------

  nginx:
    image: nginx:alpine
    container_name: epb-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./frontend/build:/var/www/html:ro
    networks:
      - epb-network
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3