package com.youthconnect.user_service.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

/**
 * UserActivityLog Entity - User Interaction Tracking
 *
 * Comprehensive logging of all user interactions across the Youth Connect platform.
 * This data is the foundation for:
 * - AI recommendation engine (collaborative filtering)
 * - User engagement analytics
 * - Feature usage tracking
 * - Security audit trail
 *
 * Activity Types:
 * - VIEW_OPPORTUNITY: User viewed opportunity details
 * - APPLY_OPPORTUNITY: User submitted application
 * - LISTEN_AUDIO: User played learning module
 * - COMPLETE_MODULE: User finished learning content
 * - BOOK_MENTOR: User scheduled mentorship session
 * - SEARCH_CONTENT: User performed search
 * - UPDATE_PROFILE: User modified profile
 * - LOGIN: User authenticated
 *
 * Database Mapping:
 * - Table: user_activity_logs
 * - Primary Key: log_id (auto-increment)
 * - Indexes: Multiple for performance (user_id, activity_type, target)
 * - Partitioning: Consider partitioning by created_at in production
 *
 * Data Retention: 90 days (configurable)
 *
 * Privacy Note: Contains user interaction data - handle according to GDPR/data protection laws
 *
 * @author Youth Connect Uganda Development Team
 * @version 1.0.0
 * @since 2024-01-15
 */
@Entity
@Table(
        name = "user_activity_logs",
        indexes = {
                @Index(name = "idx_activity_user_type_time",
                        columnList = "user_id, activity_type, created_at"),
                @Index(name = "idx_activity_target",
                        columnList = "target_type, target_id"),
                @Index(name = "idx_activity_session",
                        columnList = "session_id"),
                @Index(name = "idx_activity_created_at",
                        columnList = "created_at")
        }
)
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserActivityLog {

    /**
     * Primary key - auto-generated unique identifier
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "log_id")
    private Long id;

    /**
     * User ID who performed the activity
     *
     * NOTE: Using Long instead of @ManyToOne for performance
     * Avoids lazy loading issues and circular dependencies
     */
    @Column(name = "user_id", nullable = false)
    private Long userId;

    /**
     * Activity type classification
     *
     * Standard Activity Types:
     * - VIEW_OPPORTUNITY: User viewed opportunity page
     * - APPLY_OPPORTUNITY: User submitted application
     * - LISTEN_AUDIO: User played learning module audio
     * - COMPLETE_MODULE: User finished learning content
     * - BOOK_MENTOR: User scheduled mentorship session
     * - SEARCH_CONTENT: User performed search
     * - UPDATE_PROFILE: User modified their profile
     * - LOGIN: User logged in
     * - LOGOUT: User logged out
     * - DOWNLOAD_FILE: User downloaded content
     * - SHARE_CONTENT: User shared content
     *
     * Max length: 50 characters for extensibility
     */
    @Column(name = "activity_type", nullable = false, length = 50)
    private String activityType;

    /**
     * Target entity ID (what was interacted with)
     *
     * Examples:
     * - If activity_type = "VIEW_OPPORTUNITY", target_id = opportunity ID
     * - If activity_type = "LISTEN_AUDIO", target_id = module ID
     * - If activity_type = "BOOK_MENTOR", target_id = mentor user ID
     *
     * Nullable for activities without specific targets (e.g., LOGIN)
     */
    @Column(name = "target_id")
    private Long targetId;

    /**
     * Target entity type (what kind of thing was interacted with)
     *
     * Examples: "opportunity", "module", "mentor", "post", "comment"
     *
     * Used together with target_id for polymorphic relationships
     * Nullable for activities without specific targets
     */
    @Column(name = "target_type", length = 50)
    private String targetType;

    /**
     * Session identifier for grouping activities
     *
     * - Web sessions: Generated by auth service
     * - USSD sessions: USSD session ID from telco gateway
     *
     * Used for:
     * - Analyzing user journey within a session
     * - Session duration calculation
     * - Behavior pattern analysis
     */
    @Column(name = "session_id", length = 255)
    private String sessionId;

    /**
     * User agent string (browser/device information)
     *
     * Example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36..."
     *
     * Used for:
     * - Device type analytics (mobile vs desktop)
     * - Browser compatibility tracking
     * - Security analysis (detecting suspicious patterns)
     */
    @Column(name = "user_agent", columnDefinition = "TEXT")
    private String userAgent;

    /**
     * IP address of the request
     *
     * Used for:
     * - Geographic analytics
     * - Security monitoring (unusual locations)
     * - Fraud detection
     *
     * Privacy: Consider anonymization/hashing for GDPR compliance
     */
    @Column(name = "ip_address", length = 45)
    private String ipAddress;

    /**
     * Additional metadata in JSON format
     *
     * Flexible field for storing activity-specific data:
     * - Search query and filters
     * - Time spent on page
     * - Scroll depth
     * - Click coordinates
     * - Custom event properties
     *
     * Example: {"search_query": "business grants", "results_count": 15}
     */
    @Column(name = "metadata", columnDefinition = "JSON")
    private String metadata;

    /**
     * Activity timestamp - automatically set on creation
     */
    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    // ========================================================================
    // STATIC FACTORY METHODS
    // ========================================================================

    /**
     * Create activity log for viewing an opportunity
     *
     * @param userId User who viewed
     * @param opportunityId Opportunity that was viewed
     * @param sessionId Current session ID
     * @return UserActivityLog instance
     */
    public static UserActivityLog viewOpportunity(Long userId, Long opportunityId, String sessionId) {
        return UserActivityLog.builder()
                .userId(userId)
                .activityType("VIEW_OPPORTUNITY")
                .targetId(opportunityId)
                .targetType("opportunity")
                .sessionId(sessionId)
                .build();
    }

    /**
     * Create activity log for applying to opportunity
     *
     * @param userId User who applied
     * @param opportunityId Opportunity applied to
     * @param sessionId Current session ID
     * @return UserActivityLog instance
     */
    public static UserActivityLog applyOpportunity(Long userId, Long opportunityId, String sessionId) {
        return UserActivityLog.builder()
                .userId(userId)
                .activityType("APPLY_OPPORTUNITY")
                .targetId(opportunityId)
                .targetType("opportunity")
                .sessionId(sessionId)
                .build();
    }

    /**
     * Create activity log for listening to audio module
     *
     * @param userId User who listened
     * @param moduleId Module that was played
     * @param sessionId Current session ID
     * @return UserActivityLog instance
     */
    public static UserActivityLog listenAudio(Long userId, Long moduleId, String sessionId) {
        return UserActivityLog.builder()
                .userId(userId)
                .activityType("LISTEN_AUDIO")
                .targetId(moduleId)
                .targetType("module")
                .sessionId(sessionId)
                .build();
    }

    /**
     * Create activity log for completing a learning module
     *
     * @param userId User who completed
     * @param moduleId Module that was completed
     * @param sessionId Current session ID
     * @return UserActivityLog instance
     */
    public static UserActivityLog completeModule(Long userId, Long moduleId, String sessionId) {
        return UserActivityLog.builder()
                .userId(userId)
                .activityType("COMPLETE_MODULE")
                .targetId(moduleId)
                .targetType("module")
                .sessionId(sessionId)
                .build();
    }

    /**
     * Create activity log for booking a mentor
     *
     * @param userId User who booked
     * @param mentorId Mentor who was booked
     * @param sessionId Current session ID
     * @return UserActivityLog instance
     */
    public static UserActivityLog bookMentor(Long userId, Long mentorId, String sessionId) {
        return UserActivityLog.builder()
                .userId(userId)
                .activityType("BOOK_MENTOR")
                .targetId(mentorId)
                .targetType("mentor")
                .sessionId(sessionId)
                .build();
    }

    /**
     * Create activity log for user login
     *
     * @param userId User who logged in
     * @param sessionId New session ID
     * @param ipAddress Login IP address
     * @param userAgent Login device/browser
     * @return UserActivityLog instance
     */
    public static UserActivityLog login(Long userId, String sessionId, String ipAddress, String userAgent) {
        return UserActivityLog.builder()
                .userId(userId)
                .activityType("LOGIN")
                .sessionId(sessionId)
                .ipAddress(ipAddress)
                .userAgent(userAgent)
                .build();
    }

    /**
     * Create activity log for search action
     *
     * @param userId User who searched
     * @param searchQuery Search query string
     * @param sessionId Current session ID
     * @return UserActivityLog instance
     */
    public static UserActivityLog searchContent(Long userId, String searchQuery, String sessionId) {
        return UserActivityLog.builder()
                .userId(userId)
                .activityType("SEARCH_CONTENT")
                .sessionId(sessionId)
                .metadata(String.format("{\"search_query\":\"%s\"}", searchQuery))
                .build();
    }

    // ========================================================================
    // UTILITY METHODS
    // ========================================================================

    /**
     * Check if this activity represents a high-value interaction
     * High-value activities carry more weight in recommendations
     *
     * @return true if activity is high-value
     */
    public boolean isHighValueActivity() {
        return switch (this.activityType) {
            case "APPLY_OPPORTUNITY", "COMPLETE_MODULE", "BOOK_MENTOR" -> true;
            default -> false;
        };
    }

    /**
     * Check if activity involves a target entity
     *
     * @return true if activity has target
     */
    public boolean hasTarget() {
        return this.targetId != null && this.targetType != null;
    }

    /**
     * Get activity score for recommendation weighting
     * Different activities have different importance levels
     *
     * @return Activity score (0.1 to 1.0)
     */
    public double getActivityScore() {
        return switch (this.activityType) {
            case "APPLY_OPPORTUNITY" -> 1.0;
            case "COMPLETE_MODULE" -> 0.9;
            case "BOOK_MENTOR" -> 0.8;
            case "LISTEN_AUDIO" -> 0.6;
            case "VIEW_OPPORTUNITY" -> 0.4;
            case "SEARCH_CONTENT" -> 0.3;
            case "UPDATE_PROFILE" -> 0.2;
            case "LOGIN" -> 0.1;
            default -> 0.5;
        };
    }

    /**
     * Parse metadata JSON to extract specific fields
     * Utility method for working with metadata
     *
     * @param key JSON key to extract
     * @return Extracted value or null
     */
    public String getMetadataValue(String key) {
        if (this.metadata == null || this.metadata.isEmpty()) {
            return null;
        }

        try {
            // Simple JSON parsing (in production, use a proper JSON library)
            String pattern = "\"" + key + "\":\"([^\"]+)\"";
            java.util.regex.Pattern r = java.util.regex.Pattern.compile(pattern);
            java.util.regex.Matcher m = r.matcher(this.metadata);
            if (m.find()) {
                return m.group(1);
            }
        } catch (Exception e) {
            // Silently fail for parsing errors
        }
        return null;
    }

    /**
     * Calculate time since activity (in minutes)
     * Useful for recency-based recommendations
     *
     * @return Minutes since activity occurred
     */
    public long getMinutesSinceActivity() {
        return java.time.Duration.between(this.createdAt, LocalDateTime.now()).toMinutes();
    }

    /**
     * Check if activity is recent (within last hour)
     *
     * @return true if activity is recent
     */
    public boolean isRecent() {
        return getMinutesSinceActivity() <= 60;
    }

    /**
     * Get activity type category for grouping
     *
     * @return Activity category (ENGAGEMENT, CONVERSION, PROFILE_MANAGEMENT, SYSTEM)
     */
    public String getActivityCategory() {
        return switch (this.activityType) {
            case "VIEW_OPPORTUNITY", "LISTEN_AUDIO", "SEARCH_CONTENT" -> "ENGAGEMENT";
            case "APPLY_OPPORTUNITY", "COMPLETE_MODULE", "BOOK_MENTOR" -> "CONVERSION";
            case "UPDATE_PROFILE" -> "PROFILE_MANAGEMENT";
            case "LOGIN", "LOGOUT" -> "SYSTEM";
            default -> "OTHER";
        };
    }

    @Override
    public String toString() {
        return "UserActivityLog{" +
                "id=" + id +
                ", userId=" + userId +
                ", activityType='" + activityType + '\'' +
                ", targetType='" + targetType + '\'' +
                ", targetId=" + targetId +
                ", createdAt=" + createdAt +
                '}';
    }
}