package com.youthconnect.user_service.config;

import com.youthconnect.user_service.service.JwtUtil;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;

/**
 * A custom filter that runs once for every incoming request.
 * Its job is to intercept requests, check for a JWT in the Authorization header,
 * validate it, and set the user's authentication status in the Spring Security context.
 */
@Component
@RequiredArgsConstructor
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;
    private final UserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(
            HttpServletRequest request,
            HttpServletResponse response,
            FilterChain filterChain) throws ServletException, IOException {

        final String authHeader = request.getHeader("Authorization");
        final String jwt;
        final String userEmail;

        // 1. Check if the Authorization header exists and is in the correct format ("Bearer ...")
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response); // If not, pass the request to the next filter
            return;
        }

        // 2. Extract the JWT from the header
        jwt = authHeader.substring(7);
        userEmail = jwtUtil.getEmailFromToken(jwt);

        // 3. If we have an email and the user is not already authenticated...
        if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            // ...load the user's details from the database.
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(userEmail);

            // 4. If the token is valid...
            if (jwtUtil.validateToken(jwt)) {
                // ...create an authentication token.
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        userDetails,
                        null, // We don't have credentials
                        userDetails.getAuthorities()
                );
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                // 5. Update the Spring Security Context with the new authentication.
                // This is the line that tells Spring Security, "This user is authenticated!"
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        // 6. Pass the request to the next filter in the chain.
        filterChain.doFilter(request, response);
    }
}